// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Proiect.Data;

#nullable disable

namespace Proiect.Server.Migrations
{
    [DbContext(typeof(ProiectContext))]
    [Migration("20240205094226_DateLeague")]
    partial class DateLeague
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Proiect.Models.LeagueData.Champion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("IconID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Race")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SplashArt_URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IconID")
                        .IsUnique()
                        .HasFilter("[IconID] IS NOT NULL");

                    b.ToTable("Champions");
                });

            modelBuilder.Entity("Proiect.Models.LeagueData.Icons", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Icon_URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Icons");
                });

            modelBuilder.Entity("Proiect.Models.LeagueData.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IconID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IconID")
                        .IsUnique();

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Proiect.Models.LeagueData.ModelsRelation", b =>
                {
                    b.Property<Guid>("SelectedChampId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SelectedChampId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("ModelsRelations");
                });

            modelBuilder.Entity("Proiect.Models.LeagueData.SelectedChampions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChampionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ChampionID");

                    b.ToTable("SelectedChampions");
                });

            modelBuilder.Entity("Proiect.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Proiect.Models.LeagueData.Champion", b =>
                {
                    b.HasOne("Proiect.Models.LeagueData.Icons", "Icon")
                        .WithOne("Champion")
                        .HasForeignKey("Proiect.Models.LeagueData.Champion", "IconID");

                    b.Navigation("Icon");
                });

            modelBuilder.Entity("Proiect.Models.LeagueData.Item", b =>
                {
                    b.HasOne("Proiect.Models.LeagueData.Icons", "Icon")
                        .WithOne("Item")
                        .HasForeignKey("Proiect.Models.LeagueData.Item", "IconID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Icon");
                });

            modelBuilder.Entity("Proiect.Models.LeagueData.ModelsRelation", b =>
                {
                    b.HasOne("Proiect.Models.LeagueData.Item", "Item")
                        .WithMany("ModelsRelations")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proiect.Models.LeagueData.SelectedChampions", "SelectedChampions")
                        .WithMany("ModelsRelations")
                        .HasForeignKey("SelectedChampId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("SelectedChampions");
                });

            modelBuilder.Entity("Proiect.Models.LeagueData.SelectedChampions", b =>
                {
                    b.HasOne("Proiect.Models.LeagueData.Champion", "Champion")
                        .WithMany("SelectedChampions")
                        .HasForeignKey("ChampionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Champion");
                });

            modelBuilder.Entity("Proiect.Models.LeagueData.Champion", b =>
                {
                    b.Navigation("SelectedChampions");
                });

            modelBuilder.Entity("Proiect.Models.LeagueData.Icons", b =>
                {
                    b.Navigation("Champion");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Proiect.Models.LeagueData.Item", b =>
                {
                    b.Navigation("ModelsRelations");
                });

            modelBuilder.Entity("Proiect.Models.LeagueData.SelectedChampions", b =>
                {
                    b.Navigation("ModelsRelations");
                });
#pragma warning restore 612, 618
        }
    }
}
